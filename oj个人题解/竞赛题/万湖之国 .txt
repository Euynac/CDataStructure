#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;
class DisjSets
{
    int *s;
    int count;//记录并查集中子集合的个数(子树的个数)
public:
    DisjSets(int numElements) {
        s = new int[numElements];
        count = numElements;
        //初始化并查集,相当于新建了s.length 个互不相交的集合
        for(int i = 0; i < count; i++)
            s[i] = -1;//s[i]存储的是高度(秩)信息
    }

    /**
     *
     * @param root1 并查集中以root1为代表的某个子集
     * @param roo2 并查集中以root2为代表的某个子集
     * 按高度(秩)合并以root1 和 root2为代表的两个集合
     */
    void unionByHeight(int root1, int root2){
        if(find(root1) == find(root2))
            return;//root1 与 root2已经连通了

        if(s[root2] < s[root1])//root2 is deeper
            s[root1] = root2;
        else{
            if(s[root1] == s[root2])//root1 and root2 is the same deeper
                s[root1]--;//将root1的高度加1
            s[root2] = root1;//将root2的根(指向)更新为root1
        }

        count--;//每union一次,子树数目减1
    }
    void unions(int root1, int root2){
        s[root2] = root1;//将root1作为root2的新树根
    }
    void unionBySize(int root1, int root2){

        if(find(root1) == find(root2))
            return;//root1 与 root2已经连通了

        if(s[root2] < s[root1])//root2 is deeper
            s[root1] = root2;
        else{
            if(s[root1] == s[root2])//root1 and root2 is the same deeper
                s[root1]--;//将root1的高度加1
            s[root2] = root1;//将root2的根(指向)更新为root1
        }

        count--;//每union一次,子树数目减1
    }
     int find(int x){
        if(s[x] < 0)//s[x]为负数时,说明 x 为该子集合的代表(也即树根), 且s[x]的值表示树的高度
            return x;
        else
            return s[x] = find(s[x]);//使用了路径压缩,让查找路径上的所有顶点都指向了树根(代表节点)
            //return find(s[x]); 没有使用 路径压缩
    }
    int size(){
        return count;
    }
};
struct circle
{
    double x;
    double y;
    double r;
}C[100005];
bool unionornot(circle a,circle b)
{
    double len;
    len=(a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
    double len2;
    len2=(a.r+b.r)*(a.r+b.r);
    if(len<len2)return true;
    else return false;
}
bool cmp(circle a,circle b)
{
    return a.x-a.r>b.x-b.r;
}
int main()
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++)scanf("%lf%lf%lf",&C[i].x,&C[i].y,&C[i].r);
    //for(int i=0;i<n;i++)cout<<C[i].x<<" "<<C[i].y<<" "<<C[i].r<<endl;
    sort(C,C+n,cmp);
    //for(int i=0;i<n;i++)cout<<C[i].x<<" "<<C[i].y<<" "<<C[i].r<<endl;
    DisjSets G(n);
    for(int i=0;i<n;i++)
    {
        for(int j=i;j<n;j++)
        {
            if(C[i].x+C[i].r<C[j].x-C[j].r)goto there;
            if(G.find(i)!=G.find(j))
            {
                if(unionornot(C[i],C[j])==true)
                    G.unionBySize(i,j);
            }
        }
        there:{}
    }
    cout<<G.size();
    return 0;
}




************傻逼霖版:



#include <iostream>
#include <algorithm>
#include <cstdio>
using namespace std;
#define N 100005
int pre[N]; //记录i的父亲（根节点）
//int rank1[N];
int n; //输入变量n
struct CC //定义坐标结构体
{
    double x,y; //注意都是double
    double r;
}c[N]; //结构体数组
struct PP
{
    double x; //代表存储的对应圆的x边界（左右边界）
    int type; //代表是左边界还是右边界 (左边界是0) （右边界是1） 
    int idx;  //代表是第几个圆的序号
}p[2*N];   //因为左右边界所以N要乘以2

void makeset(int x)
{
    //rank1[x]=0;
    pre[x]=x;
}

int findd(int x)
{
    int i,px=x;
    while(px!=pre[px]) px=pre[px]; //寻找根节点px
    //找到之后，进行路径压缩
    while(x!=px){
        i=pre[x]; //保存x的父亲
        pre[x]=px; //改变x的父亲指向根节点
        x=i; //改变x的变量，变为原来x的父亲 
        //可以想想为什么他们的步骤不能调换
    }
    return px;
}

void unionset(int x, int y)
{
    int xx=findd(x);
    int yy=findd(y);
   //if(rank1[xx]>rank1[yy]) pre[yy]=xx;
    //else {
        //pre[xx]=yy;
        //if(rank1[yy]==rank1[xx]) rank1[yy]++;
    //}
    if(xx!=yy)
       pre[xx]=yy;
}

bool cmp(struct PP a, struct PP b)
{
    //return a.x>b.x;错的。。。
    return a.x<b.x; //要升序
}

int goal(struct CC a, struct CC b) //比较是否相交 如果相交返回1，否则返回0
{
    double dis=(a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
    double d=(a.r+b.r)*(a.r+b.r);
    if(dis-d<0) return 1;
    else return 0;
}
//bool rig[N];
int main()
{
    cin>>n;
    for(int i=0; i<n; i++) //初始化
    {
        //cin>>c[i].x>>c[i].y>>c[i].r;
        scanf("%lf %lf %lf",&c[i].x,&c[i].y,&c[i].r);
        p[2*i].x=c[i].x-c[i].r;
        p[2*i].type=0;
        p[2*i].idx=i;
        p[2*i+1].x=c[i].x+c[i].r;
        p[2*i+1].type=1;
        p[2*i+1].idx=i;
    }
    sort(p,p+2*n,cmp); //升序
    for(int i=0; i<n; i++) makeset(i);
    int j;
    for(int i=0; i<2*n; i++)
    {
        if(p[i].type==1) continue; //如果是右边界则退出此次循环，代表i这个圆（仅是这个圆
        //到达了右边界），则应该判断下一个圆（i+1）即执行i++
        else{
            for(j=i+1; j<2*n&&p[i].idx!=p[j].idx; j++) //循环的条件是
            // j<2*n,而且要在第i个圆的范围内循环
            {
                if(p[j].type==0){ //如果是左边界就进入判断两个圆是否会相交
                    if(goal(c[p[j].idx],c[p[i].idx])==1) //符合相交的情况就合并
                        unionset(p[j].idx,p[i].idx);
                }
                else continue; //这一步要不要都是一样的
            }
        }
    }
    //for(int i=0; i<n; i++)
    //rig[findd(i)]=1;
    int sum=0;
    for(int i=0; i<n; i++)
        if(pre[i]==i) sum++; //判断有多少个根节点，就代表有点少个湖
    //for(int i=0; i<n ;i++)
    //if(rig[i]==1) sum++;
    printf("%d\n",sum);
}
/*
4
0 0 2
2 2 1
3 0 1
4 0 1
*/
