消息
×
loading..
8615 快乐
该题有题解

时间限制:500MS  内存限制:1000K
提交次数:312 通过次数:98

题型: 编程题   语言: G++;GCC
Description
Lian是一个喜欢看动画片的人，自从成为ACMer（ACM爱好者）之后，他又迷上了网上做题。做题让他快乐，不过这也是需要付出精力的！！
假设有n道题，Lian做出第i道题后，他可以获得的快乐指数将增加gethappy[i]，而消耗掉的精力将是losspow[i]。
假设Lian初始的快乐指数为1，精力为2000。可以理解，如果他消耗完了所有的精力那他得到再多的快乐都没有用。
你的任务就是帮他计算他所能得到的最多的快乐指数，且最后他依然有多余的精力（即至少为1）。



输入格式
第一行输入一个整数n，表示有n个人。(n<=50)
第二行输入n个整数，表示gethappy[1]到gethappy[n]
第三行输入n个整数，表示losspow[1]到losspow[n]。


输出格式
一个整数，表示Lian所能获得的最大快乐指数。


输入样例
3
15 23 61
350 1301 1513



输出样例
77




来源 jiangju0 

作者 admin
提交
题解
 
Version 1.0 | Designer：Chen Xiang-ji | ? 2009-2017Unlimited Studio





````````````````````样例
50
25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195 200 205 210 215 220 225 230 235 240 245 250 255 260 265 270
1075 875 900 350 1225 1150 500 850 1050 1300 975 325 950 100 775 275 600 1025 675 475 725 175 1175 400 1200 1325 625 375 225 1250 700 1000 825 525 425 125 200 300 800 150 1125 550 750 1275 1100 925 575 650 250 450
1756




````````````````````````````````````````````性价比/happy/losspow（贪心）
#include<stdio.h>
#include<stdlib.h>
struct man//使用结构体存一个人的精力、快乐、单位性价比
{
    int losspow;
    int gethappy;
    double var;
};
typedef struct man MAN;
int cmp(const void *a,const void *b)//排序规则：按性价比降序排列
{
    MAN *aa=(MAN *)a;
    MAN *bb=(MAN *)b;
    return (aa->var>bb->var?-1:1);
}
int cmp2(const void *a,const void *b)//排序规则：按快乐降序排列
{
    MAN *aa=(MAN *)a;
    MAN *bb=(MAN *)b;
    return (aa->gethappy>bb->gethappy?-1:1);
}
int cmp3(const void *a,const void *b)//排序规则：按精力升序排列
{
    MAN *aa=(MAN *)a;
    MAN *bb=(MAN *)b;
    return (aa->losspow>bb->losspow?1:-1);
}
int main()
{
    MAN Lian[50];
    int happy[150];
    int n,i,j,hp,lp,maxv;
    scanf("%d",&n);
    for(i=0;i<n;i++)
        scanf("%d",&Lian[i].gethappy);
    for(i=0;i<n;i++)
        scanf("%d",&Lian[i].losspow);
    for(i=0;i<n;i++)
        Lian[i].var=(double)Lian[i].losspow/(double)Lian[i].gethappy;
    qsort(Lian,n,sizeof(MAN),cmp);//贪心策略：性价比
    for(j=0;j<n;j++)
    {
        for(hp=1,lp=2000,i=j;i<n;i++)
        {
            if(lp-Lian[i].losspow>=1)
            {
                lp-=Lian[i].losspow;
                hp+=Lian[i].gethappy;
            }
        }
        happy[j]=hp;
    }
    qsort(Lian,n,sizeof(MAN),cmp2);//贪心策略：happy
    for(;j<2*n;j++)
    {
        for(hp=1,lp=2000,i=j-n;i<n;i++)
        {
            if(lp-Lian[i].losspow>=1)
            {
                lp-=Lian[i].losspow;
                hp+=Lian[i].gethappy;
            }
        }
        happy[j]=hp;
    }
    qsort(Lian,n,sizeof(MAN),cmp3);//贪心策略：losspow
    for(;j<3*n;j++)
    {
        for(hp=1,lp=2000,i=j-2*n;i<n;i++)
        {
            if(lp-Lian[i].losspow>=1)
            {
                lp-=Lian[i].losspow;
                hp+=Lian[i].gethappy;
            }
        }
        happy[j]=hp;
    }
    for(maxv=happy[0],i=0;i<3*n;i++)//与三种贪心策略得到的结果一一对比
    {
        if(maxv<happy[i])
            maxv=happy[i];
    }
    printf("%d\n",maxv);
    return 0;
}





・・・・・・・・・・・・・・・・・・・・・・・・・・・答案
#include <stdio.h>
#define MAXPOW 1999 //至少留1体力，所以设置成2000-1
int gethappy[55];
int losepow[55];
int dp[55][MAXPOW];
int main()
{
    int n,i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&gethappy[i]);
    }
    for(i=0;i<n;i++){
        scanf("%d",&losepow[i]);
    }
    for(j=0;j<MAXPOW;j++){
        dp[0][j] = losepow[0] <= j ? gethappy[0] : 0;
    }

    for(i=1;i<n;i++){
        for(j=0;j<MAXPOW;j++){
            if(losepow[i]>j) dp[i][j] = dp[i-1][j];
            else{
                if(dp[i-1][j]>dp[i-1][j-losepow[i]]+gethappy[i]) dp[i][j] = dp[i-1][j];
                else dp[i][j] = dp[i-1][j-losepow[i]]+gethappy[i];
            }
        }
    }
    printf("%d",dp[n-1][MAXPOW-1]+1); //初始有1点的快乐

    return 0;
}

````````````````````````````````````````````````````````回溯法（超时）
#include <stdio.h>
#define C 1999 //有2000点体力，要求剩1点，则可用为1999点
int CurWeight=0;//目前体力消耗（类比为背包装的重量）
int CurValue=1;//目前快乐值（类比为价值）
int BestValue=1;//最佳快乐值
int gethappy[50];//50个题目所能获得的快乐值
int losspow[50];//50个题目所需要的精力
int X[50]={0};//50个题目写与不写 0为写，1为不写
int N=0;//初始化N 接下来会输入N道题
void backtract(int t)
{
    int i;
    if(t>N-1)//到最后的叶子
    {
        if(CurValue>BestValue)
        {
            BestValue=CurValue;
        }
    }
    else
    {
        for(i=0;i<=1;i++)//遍历当前节点的子结点 0 不做题 1 做题
        {
            if(i==0)//不做题
                backtract(t+1);
            else//做题
            {
                if((CurWeight+losspow[t])<=C)//我还能做（可视作剪枝条件）
                {
                    CurWeight+=losspow[t];
                    CurValue+=gethappy[t];
                    backtract(t+1);
                    CurWeight-=losspow[t];//回溯的精髓
                    CurValue-=gethappy[t];
                }
            }
        }
    }
}
int main()
{
    int i;
    scanf("%d",&N);
    for(i=0;i<N;i++)
        scanf("%d",&gethappy[i]);
    for(i=0;i<N;i++)
        scanf("%d",&losspow[i]);
    backtract(0);
    printf("%d",BestValue);
    return 0;
}
-------------------------------------------------------dp
#include <iostream>
#include <cstdio>
using namespace std;
int m[1999][51]={0};//100个物品 容量最大1000
int main()
{
    //freopen("data1.txt","r",stdin);
    int C=1999,n;
    int v[51];
    int w[51];
    cin>>n;
    for(int i=1;i<=n;i++)cin>>v[i];
    for(int i=1;i<=n;i++)cin>>w[i];
//    for(int i=1;i<=n;i++)cout<<v[i]<<" "<<w[i]<<endl;
    for(int j=0;j<=C;j++)
    {
        if(j<w[n-1])m[j][n]=0;
        else m[j][n]=v[n-1];
    }
    for(int i=n;i>=1;i--)
        for(int j=0;j<=C;j++)
        {
            if(j<w[i])m[j][i]=m[j][i+1];
            else m[j][i]=(m[j][i+1]>m[j-w[i]][i+1]+v[i]?
                          m[j][i+1]:m[j-w[i]][i+1]+v[i]);
        }
    cout<<m[C][1]+1<<endl;
//    for(int j=C;j>=0;j--)
//    {
//        for(int i=1;i<=n;i++)
//            printf("%4d",m[j][i]);
//        cout<<endl;
//    }
    return 0;
}

