#include <iostream>
using namespace std;
///////////////////////////method 1
void quicksort(int A[],int low,int high)
{
    int loww=low,highh=high;
    if(low>=high)return;
    int pivot=A[low];
    while(low<high)
    {
        while(A[high]>=pivot&&low<high)high--;
        A[low]=A[high];
        while(A[low]<=pivot&&low<high)low++;
        A[high]=A[low];
    }
    A[low]=pivot;
    for(int i=0;i<n;i++)cout<<A[i]<<" ";
    cout<<endl;
    quicksort(A,loww,low-1);
    quicksort(A,low+1,highh);
}
///////////////////////////method 2
void quicksort(int A[],int left,int right)
{
    if(left>=right)return;
    int p=A[left];
    int i=left,j=right;
    while(i<j)
    {
        while(A[j]>=p&&i<j)j--;
        while(A[i]<=p&&i<j)i++;
        if(i<j)swap(A[i],A[j]);
    }
    A[left]=A[i];
    A[i]=p;
    for(int i=0;i<n;i++)cout<<A[i]<<" ";
    cout<<endl;
    quicksort(A,left,i-1);
    quicksort(A,i+1,right);
}
///////////////////////////////////
int n;
void quicksort(int A[],int low,int high)
{
    int loww=low,highh=high;
    if(low>=high)return;
    int pivot=low;
    while(low<high)
    {
        while(A[high]>A[pivot]&&low<high)
            high--;
        if(low>=high)break;
        swap(A[high],A[pivot]);
        pivot=high;
        low++;
        while(A[low]<A[pivot]&&low<high)
            low++;
        if(low>=high)break;
        swap(A[low],A[pivot]);
        pivot=low;
        high--;
    }
    for(int i=0;i<n;i++)cout<<A[i]<<" ";
    cout<<endl;
    quicksort(A,loww,pivot-1);
    quicksort(A,pivot+1,highh);
}
int main()
{
    cin>>n;
    int A[n];
    for(int i=0;i<n;i++)cin>>A[i];
    if(n==1)cout<<A[0]<<endl;
    else
    quicksort(A,0,n-1);
    return 0;
}
