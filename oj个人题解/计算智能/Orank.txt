注意strcmp、strcpy、cmp函数的使用


18290 校赛排名2
时间限制:1000MS  内存限制:65535K
提交次数:0 通过次数:0

题型: 编程题   语言: G++;GCC;VC
Description
下面是校赛的排名规则：
比赛期间，提交代码后，系统会返回正确或错误等结果。最后的获胜者为正确解答题目最多，如果同题数则总用时最少的队伍。
每道试题的时间花费将从竞赛开始到试题提交并且被判定为正确为止，其间每一次提交运行结果被判错误的话将被加罚20分钟时间，
未正确解答的试题不记时，如果已经返回正确的题目再重复提交则不影响结果。
例如：A、B两队都正确完成两道题目，其中A队提交这两题的时间分别是比赛开始后60分钟和165分钟，B队为80分钟和130分钟，
但B队第一个题提交了2次才通过。这样A队的总用时为60+165=225而B队为（80+20）+130=230，所以A队以总用时少而获胜。
现在给出裁判机上面所有队伍的提交时间(分钟数)和返回结果，需要你编程输出当前比赛的排行榜。

注：0题的队伍不需要输出



输入格式
每行一个评判结果，格式为：时间（第几分钟提交的）+半角空格+队名+半角空格+题号+半角空格+评判结果（0通过，其它为出错）

题号由大写A字符开始，第2题是B，依次类推，最多不超过15题
所有评判结果已经按时间排序好


输出格式
输出排名，一行一个，格式为队名+半角空格+通过题数+半角空格+罚时

注：0题的队伍不需要输出
测试数据中，没有同题且同罚时的情况


输入样例
2 abc A 4
5 abc B 0
6 def A 0
10 abc A 0
13 xyx A 4
20 def B 5


输出样例
abc 2 35
def 1 6


#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
struct team
{
    char name[100];
    int question[16];
    int wrong[16];
    int time;
    int AC;
}T[1000];
bool cmp(struct team a,struct team b)
{
    if(a.AC==b.AC)return a.time<b.time;
    else return a.AC>b.AC;
}
int main()
{
    int time,status,count=0,i;
    char name[100];
    char problem;
    while(scanf("%d %s %c %d",&time,name,&problem,&status)>0)
    {
        for(i=0;i<count;i++)
        {
            if(strcmp(T[i].name,name)==0)
                break;
        }
        if(i==count)//说明没有这个队伍
        {
            count++;
            memset(T[i].question,0,sizeof(int)*16);
            memset(T[i].wrong,0,sizeof(int)*16);
            T[i].AC=0;
            strcpy(T[i].name,name);
        }
        if(status==0)
        {
            if(T[i].question[problem-'A']!=1)
            {
                T[i].question[problem-'A']=1;
                T[i].AC++;
                T[i].time+=T[i].wrong[problem-'A']*20;
                T[i].time+=time;
            }
        }
        else T[i].wrong[problem-'A']++;
    }
    sort(T,T+count,cmp);
    for(int i=0;i<count;i++)
    {
        if(T[i].AC==0)break;
        printf("%s %d %d\n",T[i].name,T[i].AC,T[i].time);
    }
    return 0;
}












#include <iostream>
#include <map>
#include <cstring>
#include <cstdio>
using namespace std;
typedef struct team
{
    int time;
    char name[20];
    map<char,int> question;
    int wrong;
    int pass;
}Team;
int chartoint(char *chr)
{
    int len = strlen(chr);
    int multiply = 1;
    int ans=0;
    for(int i=0;i<len;i++,multiply*=10)
    {
        ans+=(chr[len-i-1]-'0')*multiply;
    }
    return ans;
}
int main()
{
    freopen("in.txt","r",stdin);
    map<char *,Team> T;
    int datalen;
    char data[100][30];
    for(datalen=0;gets(data[datalen])!=NULL;datalen++);
    for(int i=0;i<=datalen;i++)
    {
        puts(data[i]);
    }
    for(int i=0;i<=datalen;i++)
    {
        int flag=1;
        for(unsigned int j=0;j<strlen(data[i]);j++)
        {

            char time[10]={};
            char name[20]={};
            char ques;
            if(data[i][j]==' ')
            {
                flag++;
                continue;
            }
            if(flag==1)
            {

                time[j]=data[i][j];
            }
            else if(flag==2)
            {

                name[j]=data[i][j];
            }
            else if(flag==3)
            {

                ques=data[i][j];
            }
            else if(flag==4)
            {
                if(data[i][j]!='0')
                {
                    if(T[name].question[data[i][j]]!=1)
                    {cout<<"in"<<endl;
                        T[name].time+=20;
                        T[name].wrong++;
                    }
                }
                else
                {
                    if(T.find(name)!=T.end())
                    {cout<<"in"<<endl;
                        strcpy(T[name].name,name);
                        T[name].time=chartoint(time);
                        T[name].question[data[i][j]]=1;
                        T[name].pass++;
                    }
                }
            }
        }
    }
    cout<<T.size();
    return 0;
}
