#include "stdio.h"
#include "math.h"
#include "string.h"
#include "stdlib.h"
struct wandc
{
    char word[21];
    int count;
};

int main()
{
    FILE *fp,*f2p,*f3p,*f4p,*f5p;
    char ch,dict[10000][21],temp[21];
    int flag=0,i,j,n=0,m=0;
    struct wandc wc[10000],tmp;
    if((fp=fopen("case1.in","r"))==NULL)
    {
        printf("Can't open the original file!\n");
        exit(0);
    }
    if((f2p=fopen("result.txt","w"))==NULL)
    {
        printf("Can't open the result file!\n");
        exit(0);
    }
    while((ch=fgetc(fp))!=EOF)
    {
        if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z')||(ch=='-')||(flag==1))
        {
            if(ch>='A'&&ch<='Z')
                ch+=32;
            if(ch=='-')             //i didn't consider the circumstance that "stu-dent" without a \n;
            {
                flag=1;
                continue;
            }
            if(flag==1)
            {
                if(ch=='\n')
                {
                    flag=0;
                    continue;
                }
                else if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z'))
                {
                    flag=0;
                    fputc('\n',f2p);
                }
                else
                {
                    fputc('\n',f2p);
                    continue;
                }
            }
            fputc(ch,f2p);
        }
        else
            fputc('\n',f2p);
    }
//i also didn't consider that if the last char is \0 but not the other char, it will output a string without \n;
    fclose(fp);
    fclose(f2p);
    printf("Succeed in extracting the words!\n");
        if((f3p=fopen("result.txt","r"))==NULL)
    {
        printf("Can't open the original file!\n");
        return 0;
    }
    while((fgets(dict[n],21,f3p))!=NULL)
    {
        if(dict[n][0]!='\n')
            n++;
    }
    fclose(f3p);
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-1-i;j++)
        {
            if(strcmp(dict[j],dict[j+1])>0)
            {
                strcpy(temp,dict[j]);
                strcpy(dict[j],dict[j+1]);
                strcpy(dict[j+1],temp);
            }
        }
    }
    if((f3p=fopen("sorted.txt","w"))==NULL)
    {
        printf("Fail to create the sorted file!\n");
        return 0;
    }

    for(i=0;i<n;i++)
        fputs(dict[i],f3p);
    fclose(f3p);
    printf("Succeed in sorting from dictionary way!\n");
    if((f4p=fopen("sorted.txt","r"))==NULL)
    {
        printf("Can't open the sorted file!\n");
        exit(0);
    }
    n=0;
    while((fgets(dict[n],21,f4p))!=NULL)
    {
        if(n==0)
        {
            strcpy(wc[m].word,dict[n]);
            n++;
            wc[m].count=1;
        }
        else
        {
            if(strcmp(dict[n],dict[n-1])==0)
            {
                wc[m].count++;
            }
            else
            {
                m++;
                strcpy(wc[m].word,dict[n]);
                wc[m].count=1;
            }
            n++;
        }
    }
    if((f5p=fopen("answer.txt","w"))==NULL)
    {
        printf("Can't create the answer file!\n");
        exit(0);
    }
    for(i=0;i<m-1;i++)
    {
        for(j=0;j<m-1-i;j++)
        {
            if(wc[j].count<wc[j+1].count)
            {
                tmp=wc[j];
                wc[j]=wc[j+1];
                wc[j+1]=tmp;
            }
        }
    }
    /*for(i=0;i<m;i++)
    {
        fputs(wc[i].word,f5p);
        fputc(wc[i].count+'0',f5p);
    }*/
    m++;
    for(i=0;i<m;i++)
    {
        for(j=0;wc[i].word[j]!='\n';j++);
        wc[i].word[j]='\0';
    }
    if(m>=5)
    {
        for(i=0;i<5;i++)
        {
            printf("%s ",wc[i].word);
            printf("%d\n",wc[i].count);
        }
    }
    else
    {
        for(i=0;i<m;i++)
        {
            printf("%s ",wc[i].word);
            printf("%d\n",wc[i].count);
        }
    }
    printf("Succeed!\n");
    return 0;

}
/*sort by dictionary
    char dict[10000][11],temp[11];
    int i,j,n=0;
    FILE *f3p;
    if((f3p=fopen("result.txt","r"))==NULL)
    {
        printf("Can't open the original file!");
        return 0;
    }
    while((fgets(dict[n],11,f3p))!=NULL)
    {
        n++;
    }
    fclose(f3p);
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-1-i;j++)
        {
            if(strcmp(dict[j],dict[j+1])>0)
            {
                strcpy(temp,dict[j]);
                strcpy(dict[j],dict[j+1]);
                strcpy(dict[j+1],temp);
            }
        }
    }
    if((f3p=fopen("answer.txt","w"))==NULL)
    {
        printf("Fail to create the objective file!");
        return 0;
    }

    for(i=0;i<n;i++)
        fputs(dict[i],f3p);
    fclose(f3p);
    return 0;
*/
